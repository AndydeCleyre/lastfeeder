---
- hosts: monolith:monolith-without-configs
  gather_facts: false
  vars:
    app_name: lastfeeder
    app_dir: /home/{{ app_name }}

  tasks:

  # app installation

    - name: get legacy python so ansible can do its thing
      raw: apk-install python

    - name: create a user to run the script
      command: adduser -D {{ app_name }} creates=/home/{{ app_name }}

    - name: clean up the code folder
      local_action: command git clean -fdx ../{{ app_name }}

    - name: install the code
      copy: src=../{{ app_name }}/ dest={{ app_dir }} owner={{ app_name }}

    - name: make the script executable
      file: path={{ app_dir }}/lastfeeder-cli.py mode=ugo+x

    - name: upgrade packages
      apk: update_cache=yes upgrade=yes

    - name: get build & runtime dependencies from system repos
      apk: name={{ item }}
      with_items:
        - python3
        - libxslt
        - gcc
        - libxml2-dev
        - libxslt-dev
        - musl-dev
        - python3-dev

    - name: get pypi dependencies
      pip: executable=pip3 requirements={{ app_dir }}/requirements.txt

    - name: purge build dependencies
      apk: name={{ item }} state=absent
      with_items:
        - gcc
        - libxml2-dev
        - libxslt-dev
        - musl-dev
        - python3-dev

  # web server installation

    - name: get nginx
      apk: name=nginx

    - name: make nginx pid folder
      file: path=/run/nginx state=directory

  # process supervision installation

    - name: get s6 process supervision tools
      apk: name={{ item }}
      with_items:
        - s6
        - s6-portable-utils

    - name: make supervised service folders
      file: path=/etc/s6-services/{{ item }} state=directory
      with_items:
        - lastfeeder
        - nginx

  # timezone

    - name: get timezone data
      apk: name=tzdata

    - name: set timezone (NY)
      copy: remote_src=yes src=/usr/share/zoneinfo/America/New_York dest=/etc/localtime

    - name: purge timezone data
      apk: name=tzdata state=absent

# - hosts: monolith:monolith-only-configs
- hosts: monolith
  gather_facts: false
  vars_files:
    - vars/lastfm_users.yml
    - vars/lastfm_credentials.yml
    - vars/web.yml
  vars:
    app_name: lastfeeder
    app_dir: /home/{{ app_name }}

  tasks:

    - name: install super secret credentials
      template: src=templates/vault.py.j2 dest={{ app_dir }}/vault.py owner={{ app_name }}

    - name: install last.fm user list
      template: src=templates/users.yml.j2 dest={{ app_dir }}/users.yml owner={{ app_name }}

    - name: install nginx configuration
      template: src=templates/nginx.conf.j2 dest=/etc/nginx/nginx.conf owner=nginx

    - name: install supervised service configurations
      template: src=services/{{ item }}/run.j2 dest=/etc/s6-services/{{ item }}/run mode=ugo+x
      with_items:
        - lastfeeder
        - nginx
